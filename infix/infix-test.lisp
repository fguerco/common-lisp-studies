(load "infix")

(ql:quickload "parachute")

(in-package :infix)

;;;; tests

(defparameter *test-data*
  '(("-123" -123)
    ("12 * -1" -12)
    ("12*-1" -12)
    ("1 - 1" 0)
    ("1-1" 0)
    ("1 -1" 0)
    ("4 - 1" 3)
    ("4-1" 3)
    ("1 - -1" 2)
    ("1- -1" 2)
    ("1 + 2 - 3 * (4 / 6)" 1)
    ("(1 + 2) - 3 * (4 / 6)" 1)
    ("12 * 123 / (-5 + 2)" -492)
    ("12* 123/(-5 + 2)" -492)
    ("(1 + 2 + 3) * 10 / ((2 * 3) + 3)" 20/3)
    ("((1 + 2) - 3) * (4 / 6)" 0)
    ("((1 + 2) * (1 - (1 + 2))) + (((10 - 1) * 2) + 3)" 15)
    ("2 + 3" 5)
    ("2 + 3 / 4" 11/4)
    ("2 * 3 - 4" 2)
    ("2 * (3 + (4 * 5 + (6 * 7) * 8) - 9) * 10" 7000)
    ("2 * -3 - -4 + -0.25" -2.25)
    ("13 + 112" 125)
    ("325 + 1124" 1449)
    ("5 + 11 - 4" 12)
    ("5 * 11 - 20 + 5" 40)
    ("1 + 2 - 3 * (4 / 6)" 1)
    ("(1 + 2) - 3 * (4 / 6)" 1)
    ("((1 + 2) - 3) * (4 / 6)" 0)
    ("12* 123/-(-5 + 2)" 492)
    ("(-5 + 2)" -3)
    ("-(-5 + 2)" 3)
    ("(3 + 2)" 5)
    ("(3 + 5) * 10" 80)
    ("(123.45*(678.90 / (-2.5+ 11.5)-(((80 -(19))) *33.25)) / 20)"
     -12053.760875d0)
    ("-(123.45*(678.90 / (-2.5+ 11.5)-(((80 -(19))) *33.25)) / 20)"
     12053.760875d0)
    ("(123.45*(678.90 / (-2.5+ 11.5)-(((80 -(19))) *33.25)))"
     -241075.2175d0)))

(defmacro make-assertions ()
  `(progn
     ,@(loop for (expr expected) in *test-data*
             collect `(is = ,expected (infix ,expr)))))

(define-test infix-tests ()
  (make-assertions))

(defun stress-test (how-many)
  (let* ((len (length *test-data*))
         (exprs (loop repeat how-many
                      for (e r) = (elt *test-data* (random len))
                      collect e)))
    (time
     (map nil #'infix exprs))))

(test :infix)

